name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # Allow manual trigger

jobs:
  format-check:
    name: Check Code Formatting
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install ruff
      run: |
        python -m pip install --upgrade pip
        pip install ruff

    - name: Check formatting
      run: |
        ruff format --check src/ experiments/ tests/
        echo "✓ Code is properly formatted"

  lint:
    name: Lint Code
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install ruff
      run: |
        python -m pip install --upgrade pip
        pip install ruff

    - name: Run ruff lint
      run: |
        ruff check src/ experiments/ tests/ --output-format=github
        echo "✓ Linting passed"

  type-check:
    name: Type Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install mypy
        pip install -e .

    - name: Run mypy
      run: |
        mypy src/knapsack_gnn/ experiments/ --ignore-missing-imports
        echo "✓ Type check passed"

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Run tests with coverage
      env:
        PYTHONHASHSEED: 42
      run: |
        pytest tests/ -v --cov=src/knapsack_gnn --cov-report=xml --cov-report=term-missing --cov-fail-under=70
        echo "✓ Tests passed with ≥70% coverage"

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.10'
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

  check-deps:
    name: Check Dependency Sync
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install uv
      run: |
        python -m pip install --upgrade pip
        pip install uv

    - name: Check dependency drift
      run: |
        make check-deps
        echo "✓ Dependencies are in sync"

  docs:
    name: Build Documentation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[docs]

    - name: Build docs
      run: |
        mkdocs build --strict
        echo "✓ Documentation built successfully"

    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./site

  # Summary job to check if all required jobs passed
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [format-check, lint, type-check, test, check-deps, docs]
    if: always()

    steps:
    - name: Check job results
      run: |
        if [ "${{ needs.format-check.result }}" != "success" ] || \
           [ "${{ needs.lint.result }}" != "success" ] || \
           [ "${{ needs.type-check.result }}" != "success" ] || \
           [ "${{ needs.test.result }}" != "success" ] || \
           [ "${{ needs.check-deps.result }}" != "success" ] || \
           [ "${{ needs.docs.result }}" != "success" ]; then
          echo "❌ One or more CI jobs failed"
          exit 1
        fi
        echo "✅ All CI checks passed"
