"""
Analysis: Do we need to retrain for large instances?
Compares retraining vs other strategies
"""

import json
from pathlib import Path


def analyze_retraining_necessity():
    """Analyze if retraining is necessary or if other strategies suffice"""

    print("=" * 90)
    print("AN√ÅLISE: NECESSIDADE DE RETREINAMENTO PARA INST√ÇNCIAS GRANDES")
    print("=" * 90)

    # Load current results
    checkpoint_dir = Path("checkpoints/run_20251020_104533")

    results_n500_path = checkpoint_dir / "evaluation" / "large_instances" / "results_n500.json"
    with open(results_n500_path) as f:
        results_n500 = json.load(f)

    print("\n" + "=" * 90)
    print("1. DIAGN√ìSTICO DO PROBLEMA")
    print("=" * 90)

    # Analyze n=500 performance
    gaps_n500 = results_n500["gaps"]
    median_gap = results_n500["median_gap"]
    mean_gap = results_n500["mean_gap"]

    # Categorize instances
    excellent = sum(1 for g in gaps_n500 if g < 1.0)
    good = sum(1 for g in gaps_n500 if 1.0 <= g < 5.0)
    bad = sum(1 for g in gaps_n500 if g >= 5.0)

    print(f"\nResultados n=500 (30 inst√¢ncias):")
    print(f"  ‚Ä¢ Excelente (gap < 1%):  {excellent} ({excellent / 30 * 100:.1f}%)")
    print(f"  ‚Ä¢ Bom (1% ‚â§ gap < 5%):   {good} ({good / 30 * 100:.1f}%)")
    print(f"  ‚Ä¢ Ruim (gap ‚â• 5%):       {bad} ({bad / 30 * 100:.1f}%)")
    print(f"\n  ‚Üí Gap mediano: {median_gap:.2f}% (excelente!)")
    print(f"  ‚Üí Gap m√©dio:   {mean_gap:.2f}% (puxado por {bad} outliers)")

    print("\n" + "-" * 90)
    print("INTERPRETA√á√ÉO:")
    print("-" * 90)

    if median_gap < 1.0:
        print("‚úì O modelo J√Å GENERALIZA BEM para a maioria das inst√¢ncias n=500")
        print("‚úì A mediana baixa indica que o modelo aprendeu padr√µes transfer√≠veis")
        print("‚úó Problema: SUBGRUPO de inst√¢ncias dif√≠ceis (~27%)")
        print("\n‚Üí Isso sugere que o problema N√ÉO √â falta de capacidade geral,")
        print("  mas sim CASOS ESPEC√çFICOS que o modelo n√£o cobre.")

    print("\n" + "=" * 90)
    print("2. CUSTO-BENEF√çCIO: RETREINAMENTO vs OUTRAS ESTRAT√âGIAS")
    print("=" * 90)

    strategies = [
        {
            "name": "1. AUMENTAR SAMPLING BUDGET",
            "cost": "Baixo (apenas infer√™ncia)",
            "implementation": "Imediato (mudar par√¢metro)",
            "expected_gain": "Moderado (5-10% de melhoria)",
            "pros": [
                "Sem custo de treinamento",
                "Funciona com modelo atual",
                "F√°cil de testar incrementalmente",
            ],
            "cons": ["Aumenta tempo de infer√™ncia", "Pode n√£o resolver outliers extremos"],
            "recommendation": "‚úÖ TESTAR PRIMEIRO",
        },
        {
            "name": "2. ESTRAT√âGIA H√çBRIDA (GNN + ILP)",
            "cost": "Baixo (implementa√ß√£o)",
            "implementation": "1-2 dias",
            "expected_gain": "Alto (resolver 90%+ dos casos ruins)",
            "pros": [
                "Sem retreinamento necess√°rio",
                "Usa melhor dos dois mundos",
                "GNN r√°pido para casos f√°ceis, ILP para dif√≠ceis",
            ],
            "cons": ["Complexidade adicional no c√≥digo", "Precisa detectar quando usar ILP"],
            "recommendation": "‚úÖ ALTA PRIORIDADE",
        },
        {
            "name": "3. RETREINAR COM INST√ÇNCIAS MAIORES",
            "cost": "Alto (dados + computa√ß√£o + tempo)",
            "implementation": "1-2 semanas",
            "expected_gain": "Incerto (pode n√£o resolver outliers)",
            "pros": ["Pode melhorar generaliza√ß√£o geral", "√ötil para n>500 tamb√©m"],
            "cons": [
                "Requer gerar milhares de inst√¢ncias grandes",
                "OR-Tools lento para n>500 (horas de CPU)",
                "Treino mais lento (grafos maiores)",
                "N√£o garante resolver casos espec√≠ficos ruins",
                "Pode degradar performance em n<200",
            ],
            "recommendation": "‚ö†Ô∏è CONSIDERAR AP√ìS TESTAR 1 e 2",
        },
        {
            "name": "4. ARQUITETURA MELHORADA (mais camadas/attention)",
            "cost": "Muito Alto (novo modelo + treino)",
            "implementation": "2-4 semanas",
            "expected_gain": "Alto para n>1000, baixo para n=500",
            "pros": ["Melhor para n>>500 (n=2000+)", "Captura depend√™ncias de longo alcance"],
            "cons": [
                "Retreinamento completo necess√°rio",
                "Mais lento na infer√™ncia",
                "Overkill para n=500",
            ],
            "recommendation": "‚ö†Ô∏è APENAS SE FOCO FOR n‚â•1000",
        },
    ]

    for i, strategy in enumerate(strategies, 1):
        print(f"\n{'-' * 90}")
        print(f"{strategy['name']}")
        print(f"{'-' * 90}")
        print(f"Custo:            {strategy['cost']}")
        print(f"Implementa√ß√£o:    {strategy['implementation']}")
        print(f"Ganho esperado:   {strategy['expected_gain']}")
        print(f"\nPr√≥s:")
        for pro in strategy["pros"]:
            print(f"  ‚úì {pro}")
        print(f"\nContras:")
        for con in strategy["cons"]:
            print(f"  ‚úó {con}")
        print(f"\nRecomenda√ß√£o: {strategy['recommendation']}")

    print("\n" + "=" * 90)
    print("3. AN√ÅLISE ESPEC√çFICA: QUANDO RETREINAR FAZ SENTIDO?")
    print("=" * 90)

    print("\nRetreinar FAZ SENTIDO quando:")
    print("  ‚úì Gap mediano tamb√©m √© alto (modelo n√£o captura o problema)")
    print("  ‚úì Degrada√ß√£o uniforme em todas as inst√¢ncias")
    print("  ‚úì Problema √© falta de capacidade arquitetural")
    print("  ‚úì Foco principal √© n>1000")

    print("\nRetreinar N√ÉO FAZ SENTIDO quando:")
    print("  ‚úó Gap mediano √© baixo, mas m√©dia alta (nosso caso!)")
    print("  ‚úó Maioria das inst√¢ncias vai bem")
    print("  ‚úó Problema √© subgrupo espec√≠fico de casos")
    print("  ‚úó Outras estrat√©gias mais baratas n√£o foram testadas")

    print("\n" + "=" * 90)
    print("4. RECOMENDA√á√ÉO FINAL")
    print("=" * 90)

    print("\nüéØ PARA n=500:")
    print("  ‚Üí N√ÉO RETREINAR AGORA")
    print("  ‚Üí Raz√£o: 73% j√° excelente, retreino pode n√£o resolver outliers espec√≠ficos")
    print("  ‚Üí Estrat√©gia:")
    print("     1. Testar sampling com 1000-2000 amostras (custo zero)")
    print("     2. Implementar h√≠brido GNN‚ÜíILP (1-2 dias)")
    print("     3. Avaliar novamente: se ainda ruim, a√≠ considerar retreino")

    print("\nüéØ PARA n=2000:")
    print("  ‚Üí RETREINAR PROVAVELMENTE NECESS√ÅRIO")
    print("  ‚Üí Raz√£o: Extrapola√ß√£o 10x √© muito extrema")
    print("  ‚Üí Mas ANTES:")
    print("     1. Coletar mais dados (N=1 insuficiente)")
    print("     2. Testar com muito mais samples (5000-10000)")
    print("     3. Se continuar ruim, retreinar com n=300-1000 no training set")

    print("\n" + "=" * 90)
    print("5. PLANO DE A√á√ÉO SUGERIDO")
    print("=" * 90)

    action_plan = [
        {
            "step": "FASE 1: Otimizar Infer√™ncia (0 custo de treino)",
            "tasks": [
                "Testar n=500 com 1000 samples (vs 500 atual)",
                "Testar n=500 com 2000 samples",
                "Medir melhoria nos casos ruins (gap>5%)",
                "Custo: ~30min de experimentos",
            ],
            "go_criteria": "Se gap m√©dio cair para <3%, PARAR AQUI",
        },
        {
            "step": "FASE 2: Estrat√©gia H√≠brida (baixo custo)",
            "tasks": [
                "Implementar detector de 'caso dif√≠cil'",
                "Se gap estimado >5%, usar ILP warm-start",
                "Testar em n=500",
                "Custo: ~2 dias implementa√ß√£o",
            ],
            "go_criteria": "Se 95%+ casos ficarem gap<2%, PARAR AQUI",
        },
        {
            "step": "FASE 3: Coleta de Dados n=1000-2000 (m√©dio custo)",
            "tasks": [
                "Gerar 20-30 inst√¢ncias n=1000",
                "Gerar 20-30 inst√¢ncias n=2000",
                "Usar OR-Tools com timeout 300s",
                "Testar estrat√©gias 1+2 nessas inst√¢ncias",
                "Custo: ~1 dia",
            ],
            "go_criteria": "Se gap m√©dio n=1000 <5% e n=2000 <10%, PARAR AQUI",
        },
        {
            "step": "FASE 4: Retreinamento (S√ì SE NECESS√ÅRIO)",
            "tasks": [
                "Gerar 2000-5000 inst√¢ncias n=50-500",
                "Resolver com OR-Tools (paralelo, ~2-3 dias CPU)",
                "Retreinar 50 √©pocas (~1 dia GPU)",
                "Avaliar em todas as escalas",
                "Custo: ~1-2 semanas",
            ],
            "go_criteria": "√öLTIMA OP√á√ÉO - s√≥ se Fases 1-3 falharem",
        },
    ]

    for i, phase in enumerate(action_plan, 1):
        print(f"\n{'=' * 90}")
        print(f"{phase['step']}")
        print(f"{'=' * 90}")
        for task in phase["tasks"]:
            print(f"  ‚Ä¢ {task}")
        print(f"\n  Crit√©rio de parada: {phase['go_criteria']}")

    print("\n" + "=" * 90)
    print("CONCLUS√ÉO")
    print("=" * 90)

    print("\nüìä RESPOSTA CURTA:")
    print("  ‚Üí Para n=500: N√ÉO precisa retreinar AGORA")
    print("  ‚Üí Para n=2000: PROVAVELMENTE precisa, mas TESTAR OUTRAS OP√á√ïES PRIMEIRO")

    print("\nüéØ RAZ√ÉO:")
    print("  O modelo j√° generaliza bem (mediana 0.08% em n=500)")
    print("  Problema s√£o casos espec√≠ficos, n√£o capacidade geral")
    print("  Retreino √© caro e pode n√£o resolver outliers")
    print("  Estrat√©gias mais baratas devem ser testadas primeiro")

    print("\n‚ö° PR√ìXIMO PASSO IMEDIATO:")
    print("  Executar FASE 1: testar n=500 com mais samples")
    print("  Tempo: 30 minutos")
    print("  Se funcionar, economiza 1-2 semanas de trabalho")

    print("\n" + "=" * 90)


if __name__ == "__main__":
    analyze_retraining_necessity()
