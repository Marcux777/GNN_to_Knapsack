[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "knapsack-gnn"
version = "1.0.0"
description = "Graph Neural Networks for Learning to Optimize the 0-1 Knapsack Problem"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Marcus Vinicius", email = "marcusvinicius@example.com"}
]
keywords = [
    "graph-neural-networks",
    "combinatorial-optimization",
    "knapsack-problem",
    "learning-to-optimize",
    "deep-learning"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "torch>=2.0.0",
    "torch-geometric>=2.5.0",
    "numpy>=1.24.0",
    "scipy>=1.10.0",
    "ortools>=9.8.0",
    "matplotlib>=3.7.0",
    "tqdm>=4.65.0",
    "click>=8.0.0",
    "pyyaml>=6.0.0",
]

[project.optional-dependencies]
cpu = [
    "torch==2.9.0",
    "torch-geometric==2.7.0",
]
cuda = [
    # Note: CUDA builds should be installed from PyTorch index
    # pip install torch==2.9.0+cu118 --index-url https://download.pytorch.org/whl/cu118
    "torch-geometric==2.7.0",
]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "ruff>=0.1.0",
    "mypy>=1.7.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "pre-commit>=3.0.0",
    "uv>=0.1.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.24.0",
]
profiling = [
    "thop",
    "memory_profiler",
]

[project.scripts]
knapsack-gnn = "knapsack_gnn.cli:main"

[project.urls]
Homepage = "https://github.com/Marcux777/GNN_to_Knapsack"
Repository = "https://github.com/Marcux777/GNN_to_Knapsack"
Issues = "https://github.com/Marcux777/GNN_to_Knapsack/issues"

[tool.setuptools]
package-dir = {"" = "src"}
packages = ["knapsack_gnn"]

[tool.setuptools.package-data]
"*" = ["*.txt", "*.md"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --cov=src/knapsack_gnn --cov-report=term-missing --cov-fail-under=70"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
pythonpath = ["src"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
]

[tool.coverage.run]
source = ["src/knapsack_gnn"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/.*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

[tool.ruff]
line-length = 100
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Unused imports in __init__.py

# Mypy: Hybrid strictness configuration
# - Strict on src/ (production code)
# - Moderate on experiments/ and tests/
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
# Strict settings for src/
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true
strict_concatenate = true
follow_imports = "normal"
ignore_missing_imports = true
show_error_codes = true
pretty = true

# Moderate settings for experiments/ (research code)
[[tool.mypy.overrides]]
module = "experiments.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false
warn_return_any = false

# Moderate settings for tests/ (test code)
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false
warn_return_any = false

[tool.black]
line-length = 100
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
